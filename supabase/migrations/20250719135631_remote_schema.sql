create type "public"."hackathon_leader_board_standing_by" as enum ('standing', 'score', 'challenge');

drop view if exists "public"."hackathons_discover_view";

alter table "public"."hackathons" alter column "status" drop default;

alter type "public"."hackathon_status" rename to "hackathon_status__old_version_to_be_dropped";

create type "public"."hackathon_status" as enum ('live', 'upcoming', 'ended', 'draft');

create table "public"."hackathon_community_partners" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "logo_url" text not null,
    "partner_website" text not null,
    "hackathon_id" integer not null
);


alter table "public"."hackathon_community_partners" enable row level security;

alter table "public"."hackathons" alter column status type "public"."hackathon_status" using status::text::"public"."hackathon_status";

alter table "public"."hackathons" alter column "status" set default 'upcoming'::hackathon_status;

drop type "public"."hackathon_status__old_version_to_be_dropped";

alter table "public"."hackathon_challenges" add column "label" text;

alter table "public"."hackathons" add column "leaderboard_standing_by" hackathon_leader_board_standing_by not null default 'standing'::hackathon_leader_board_standing_by;

alter table "public"."hackathons" add column "show_leaderboard_comments" boolean not null default false;

alter table "public"."hackathons" add column "show_leaderboard_score" boolean not null default false;

alter table "public"."hackathons" alter column "application_method" set default 'join'::hackathon_application_method;

alter table "public"."hackathons" alter column "avatar_url" set default 'https://pbnaslxybqdeosvgknbq.supabase.co/storage/v1/object/public/hackathon-images/logo-templates/logo_template_6.svg'::character varying;

alter table "public"."hackathons" alter column "banner_url" set default 'https://pbnaslxybqdeosvgknbq.supabase.co/storage/v1/object/public/hackathon-images/background-templates/background_template_000375.svg'::character varying;

alter table "public"."hackathons" alter column "deadline_to_join" set data type timestamp with time zone using "deadline_to_join"::timestamp with time zone;

alter table "public"."hackathons" alter column "deadline_to_submit" set data type timestamp with time zone using "deadline_to_submit"::timestamp with time zone;

alter table "public"."hackathons" alter column "description" set default '""'::text;

alter table "public"."hackathons" alter column "end_date" set data type timestamp with time zone using "end_date"::timestamp with time zone;

alter table "public"."hackathons" alter column "registration_start_date" set data type timestamp with time zone using "registration_start_date"::timestamp with time zone;

alter table "public"."hackathons" alter column "status" set default 'draft'::hackathon_status;

alter table "public"."hackathons" alter column "submission_start_date" set data type timestamp with time zone using "submission_start_date"::timestamp with time zone;

CREATE UNIQUE INDEX hackathon_community_partners_pkey ON public.hackathon_community_partners USING btree (id);

alter table "public"."hackathon_community_partners" add constraint "hackathon_community_partners_pkey" PRIMARY KEY using index "hackathon_community_partners_pkey";

alter table "public"."hackathon_community_partners" add constraint "hackathon_community_partners_hackathon_id_fkey" FOREIGN KEY (hackathon_id) REFERENCES hackathons(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hackathon_community_partners" validate constraint "hackathon_community_partners_hackathon_id_fkey";

set check_function_bodies = off;

create or replace view "public"."hackathon_participants_with_project_counts" as  SELECT hps.id,
    hps.hackathon_id,
    hps.application_status,
    hps.created_at,
    hps.updated_at,
    hps.participant_id,
    hps.looking_for_teammates,
    hps.users,
    COALESCE(pc.project_count, (0)::bigint) AS project_count
   FROM (hackathon_participants_sorted hps
     LEFT JOIN ( SELECT ptm.user_id,
            count(DISTINCT ptm.project_id) AS project_count
           FROM (project_team_members ptm
             JOIN projects p ON ((ptm.project_id = p.id)))
          GROUP BY ptm.user_id) pc ON ((hps.participant_id = pc.user_id)));


CREATE OR REPLACE FUNCTION public.get_registration_stats(p_hackathon_id integer, p_gran text, p_start_date timestamp with time zone)
 RETURNS TABLE(bucket timestamp with time zone, registrations bigint)
 LANGUAGE sql
 STABLE
AS $function$
  select
    gs    as bucket,
    coalesce(cnt, 0) as registrations
  from
    -- 1) generate every bucket from start → now, using interval cast
    generate_series(
      date_trunc(p_gran, p_start_date),
      date_trunc(p_gran, now()),
      ('1 ' || p_gran)::interval
    ) gs
    -- 2) left‐join your aggregated counts
    left join lateral (
      select
        date_trunc(p_gran, created_at) as b,
        count(*)                as cnt
      from hackathon_participants
      where hackathon_id = p_hackathon_id
      group by b
    ) t on t.b = gs
  order by gs
$function$
;

create or replace view "public"."hackathons_discover_view" as  SELECT h.id,
    h.name,
    h.status,
    h.type,
    h.location,
    h.start_date,
    json_build_object('name', o.name, 'logo', o.logo) AS organizer,
    COALESCE(p.participant_count, (0)::bigint) AS number_of_participant
   FROM ((hackathons h
     JOIN technology_owners o ON ((o.id = h.organizer_id)))
     LEFT JOIN ( SELECT hackathon_participants.hackathon_id,
            count(*) AS participant_count
           FROM hackathon_participants
          GROUP BY hackathon_participants.hackathon_id) p ON ((p.hackathon_id = h.id)))
  WHERE (h.status = ANY (ARRAY['upcoming'::hackathon_status, 'live'::hackathon_status]))
  ORDER BY (random())
 LIMIT 10;


grant delete on table "public"."hackathon_community_partners" to "anon";

grant insert on table "public"."hackathon_community_partners" to "anon";

grant references on table "public"."hackathon_community_partners" to "anon";

grant select on table "public"."hackathon_community_partners" to "anon";

grant trigger on table "public"."hackathon_community_partners" to "anon";

grant truncate on table "public"."hackathon_community_partners" to "anon";

grant update on table "public"."hackathon_community_partners" to "anon";

grant delete on table "public"."hackathon_community_partners" to "authenticated";

grant insert on table "public"."hackathon_community_partners" to "authenticated";

grant references on table "public"."hackathon_community_partners" to "authenticated";

grant select on table "public"."hackathon_community_partners" to "authenticated";

grant trigger on table "public"."hackathon_community_partners" to "authenticated";

grant truncate on table "public"."hackathon_community_partners" to "authenticated";

grant update on table "public"."hackathon_community_partners" to "authenticated";

grant delete on table "public"."hackathon_community_partners" to "service_role";

grant insert on table "public"."hackathon_community_partners" to "service_role";

grant references on table "public"."hackathon_community_partners" to "service_role";

grant select on table "public"."hackathon_community_partners" to "service_role";

grant trigger on table "public"."hackathon_community_partners" to "service_role";

grant truncate on table "public"."hackathon_community_partners" to "service_role";

grant update on table "public"."hackathon_community_partners" to "service_role";


