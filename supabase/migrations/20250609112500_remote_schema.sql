create table "public"."global_hackathon_feedback" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "hackathon_id" integer not null,
    "overall_hackathon_rating" integer not null,
    "recommend_hackathon_rating" integer not null,
    "overall_devspot_rating" integer not null,
    "recommend_devspot_rating" integer not null,
    "created_at" timestamp with time zone not null default now()
);


CREATE UNIQUE INDEX global_hackathon_feedback_pkey ON public.global_hackathon_feedback USING btree (id);

CREATE UNIQUE INDEX uq_hackathon_user ON public.global_hackathon_feedback USING btree (hackathon_id, user_id);

alter table "public"."global_hackathon_feedback" add constraint "global_hackathon_feedback_pkey" PRIMARY KEY using index "global_hackathon_feedback_pkey";

alter table "public"."global_hackathon_feedback" add constraint "global_hackathon_feedback_hackathon_id_fkey" FOREIGN KEY (hackathon_id) REFERENCES hackathons(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table "public"."global_hackathon_feedback" validate constraint "global_hackathon_feedback_hackathon_id_fkey";

alter table "public"."global_hackathon_feedback" add constraint "global_hackathon_feedback_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table "public"."global_hackathon_feedback" validate constraint "global_hackathon_feedback_user_id_fkey";

alter table "public"."global_hackathon_feedback" add constraint "uq_hackathon_user" UNIQUE using index "uq_hackathon_user";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_email_confirmed()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  -- If it's still NULL, the user hasn't verified their email yet.
  IF NEW.email_confirmed_at IS NOT NULL THEN

      -- Add to public.hackathon_vips table (can be single/multiple invitation(s))
    INSERT INTO public.hackathon_vips (
      hackathon_id, 
      user_id,
      status, 
      created_at, 
      updated_at
    ) 
    SELECT
    pi.hackathon_id,
    NEW.id,
    'accepted',
    NOW(),
    NOW()
    FROM public.pending_invitations AS pi
    WHERE
      pi.email = NEW.email
      AND pi.role = 'judge'
      AND pi.invitation_status = 'pending'
    ON CONFLICT (hackathon_id, user_id) DO NOTHING;


    -- Add to public.judgings table
    INSERT INTO public.judgings (
      hackathon_id, 
      user_id,
      is_submitted,
      created_at, 
      updated_at
    ) 
    SELECT
    pi.hackathon_id,
    NEW.id,
    false,
    NOW(),
    NOW()
    FROM public.pending_invitations AS pi
    WHERE
      pi.email = NEW.email
      AND pi.role = 'judge'
      AND pi.invitation_status = 'pending'
    ON CONFLICT (hackathon_id, user_id) DO NOTHING;


    -- Update public.user's role to judge
    UPDATE public.users AS u
    SET
      role_id = 3,
      updated_at = NOW()
    WHERE
      u.id = NEW.id;


      -- Update invitation_status
    UPDATE public.pending_invitations AS pi
    SET
      invitation_status = 'accepted',
      updated_at = NOW()
    WHERE
      pi.email = NEW.email
      AND pi.role  = 'judge'
      AND pi.invitation_status = 'pending';


    

  END IF;

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.users (
    id, 
    email, 
    full_name
  ) values (
    new.id,
    new.email,
    new.raw_user_meta_data->>'full_name'
  );
  return new;
end;$function$
;

grant delete on table "public"."global_hackathon_feedback" to "anon";

grant insert on table "public"."global_hackathon_feedback" to "anon";

grant references on table "public"."global_hackathon_feedback" to "anon";

grant select on table "public"."global_hackathon_feedback" to "anon";

grant trigger on table "public"."global_hackathon_feedback" to "anon";

grant truncate on table "public"."global_hackathon_feedback" to "anon";

grant update on table "public"."global_hackathon_feedback" to "anon";

grant delete on table "public"."global_hackathon_feedback" to "authenticated";

grant insert on table "public"."global_hackathon_feedback" to "authenticated";

grant references on table "public"."global_hackathon_feedback" to "authenticated";

grant select on table "public"."global_hackathon_feedback" to "authenticated";

grant trigger on table "public"."global_hackathon_feedback" to "authenticated";

grant truncate on table "public"."global_hackathon_feedback" to "authenticated";

grant update on table "public"."global_hackathon_feedback" to "authenticated";

grant delete on table "public"."global_hackathon_feedback" to "service_role";

grant insert on table "public"."global_hackathon_feedback" to "service_role";

grant references on table "public"."global_hackathon_feedback" to "service_role";

grant select on table "public"."global_hackathon_feedback" to "service_role";

grant trigger on table "public"."global_hackathon_feedback" to "service_role";

grant truncate on table "public"."global_hackathon_feedback" to "service_role";

grant update on table "public"."global_hackathon_feedback" to "service_role";


